Script started on Tue 26 Jan 2016 03:33:02 PM EST
chuang55@matrix:~/oop345/workshop/w_2> whoami
chuang55
chuang55@matrix:~/oop345/workshop/w_2> cat *.h *.cpp
#ifndef W2_STATION_H__
#define W2_STATION_H__
#include <string>
#include <fstream>
typedef unsigned int numPass;
namespace w2 {
	enum PassType { Student = 120, Adult = 121};
	class Station {
		std::string _name;
		numPass _student;
		numPass _adult;
	public:
		Station();
		void set(const std::string&, unsigned, unsigned);
		void update(PassType, int);
		unsigned inStock(PassType)const;
		const std::string& getName()const;
		void getStation(std::ifstream& fileIn);
	};
}
#endif#ifndef W2_Stations_H__
#define W2_Stations_H__
#include <iostream>
#include "Station.h"
#define SoldNum(num) -num

namespace w2 {

	class Stations {
		Station* _stations;
		int _size;
		void _allocate(int size);
		void _deallocate();
		bool _isAlloc()const;
	public:
		Stations(const char* fileName);
		~Stations();
		void update()const;
		void restock()const;
		void report()const;
	};
}
#endif#include "Station.h"
using namespace std;
namespace w2 {
	Station::Station() : _name(string()), _student(0), _adult(0) {}
	
	void Station::set(const std::string& name, unsigned student, unsigned adult) {
		_name = name;
		_student = student;
		_adult = adult;
	}

	void Station::update(PassType tp, int modify_value) {
		if (tp == Student)
			_student += modify_value;
		else if (tp == Adult)
			_adult += modify_value;
	}

	unsigned Station::inStock(PassType tp)const {
		return (tp == Student)? _student : _adult;
	}

	const std::string& Station::getName()const {
		return _name;
	}

	void Station::getStation(std::ifstream& fileIn) {
		string name;
		int s, a; // The tmp value of student and adult
		getline(fileIn, name, ';');
		fileIn >> s;
		fileIn >> a;
		set(name, s, a); // Set function
	}
}#include "Stations.h"
#include <iomanip>
using namespace std;
namespace w2 {
	void Stations::_allocate(int size) {
		if (_isAlloc())
			_stations = (Station*)0;
		_stations = new Station[size];
		_size = size;
	}

	void Stations::_deallocate() {
		if (_isAlloc())
			delete[] _stations;
		_stations = (Station*)0;
	}

	bool Stations::_isAlloc()const {
		return (_stations != (Station*)0);
	}

	Stations::Stations(const char* fileName) {
		ifstream fileIn(fileName);
		int lineNum;
		if (fileIn.is_open()) {
			fileIn >> lineNum;
			fileIn.ignore(1, ';');
			_allocate(lineNum);
			for (int i = 0; i < lineNum; i++) {
				_stations[i].getStation(fileIn);
			}
		}
	}

	Stations::~Stations() {
		_deallocate();
	}

	void Stations::update()const {
		int i;
		const string status("sold");
		int s, a; // Tmp value of student and adult
		cout << "Passes Sold :" << endl 
			<< "-------------";
		for (i = 0; i < _size; i++) {
			cout << _stations[i].getName() << endl;
			cout << " Student Passes sold : ";
			cin >> s;
			cout << " Adult   Passes sold : ";
			cin >> a;
			_stations[i].update(Student, SoldNum(s));
			_stations[i].update(Adult, SoldNum(a));
		}
		cout << endl;
	}

	// Restoke function implement here
	void Stations::restock()const {
		int i;
		const string status("added");
		int s, a; // Tmp value of student and adult
		cout << "Passes Added :" << endl
			<< "-------------";
		for (i = 0; i < _size; i++) {
			cout << _stations[i].getName() << endl;
			cout << " Student Passes added : ";
			cin >> s;
			cout << " Adult   Passes added : ";
			cin >> a;
			_stations[i].update(Student, s);
			_stations[i].update(Adult, a);
		}
		cout << endl;
	}

	// Report function implement  here
	void Stations::report()const {
		cout << "Passes in Stock : Student Adult" << endl;
		cout << "-------------------------------" << endl;
		int i;
		for (i = 0; i < _size; i++) {
			cout.width(22);
			cout << left << _stations[i].getName();
			cout << _stations[i].inStock(Student);
			cout.width(6);
			cout << right << _stations[i].inStock(Adult);
		}
		cout << endl;
	}
}
// Workshop 2 - unsigned int, Enumerations, String Class and File I/O 
// w2.cpp

#include <iostream>
#include "Stations.h"
#include "Station.h"

int main(int argc, char* argv[]) {
	std::cout << "\nCommand Line : ";
	for (int i = 0; i < argc; i++) {
		std::cout << argv[i] << ' ';
	}
	std::cout << std::endl;
	if (argc != 2) {
		std::cerr << "\nIncorrect number of arguments\n";
		return 1;
	}
	w2::Stations stations(argv[1]);
	stations.update();
	stations.restock();
	stations.report();
	return 0;
}chuang55@matrix:~/oop345/workshop/w_2> g++ -o w2 *.cpp
chuang55@matrix:~/oop345/workshop/w_2> w2 Stations.dat

Command Line : w2 Stations.dat 
Passes Sold :
-------------
Spadina
 Student Passes sold : 5
 Adult   Passes sold : 8

Bathurst
 Student Passes sold : 34
 Adult   Passes sold : 52

Keele
 Student Passes sold : 21
 Adult   Passes sold : 13

Bay
 Student Passes sold : 67
 Adult   Passes sold : 65

Passes Added :
-------------
Spadina
 Student Passes added : 29
 Adult   Passes added : 52

Bathurst
 Student Passes added : 113
 Adult   Passes added : 61

Keele
 Student Passes added : 51
 Adult   Passes added : 52

Bay
 Student Passes added : 109
 Adult   Passes added : 107

Passes in Stock : Student Adult
-------------------------------

Spadina             100   200
Bathurst            200   300
Keele               100   100
Bay                 200   200
chuang55@matrix:~/oop345/workshop/w_2> exit
exit

Script done on Tue 26 Jan 2016 03:34:19 PM EST
