Script started on Wed 03 Feb 2016 05:51:26 PM EST
chuang55@matrix:~/oop345/workshop/w_3> whoami
chuang55
chuang55@matrix:~/oop345/workshop/w_3> cat w3.cpp Text.h Text.cpp
// Workshop 3 - Copy and Move Semantics
// w3.cpp

#include <iostream>
#include <iomanip>
#include <utility>
#include <ctime>
#include "Text.h"
#define TIME(start, end) double((end) - (start)) / CLOCKS_PER_SEC

int main(int argc, char* argv[]) {
	if (argc == 1) {
		std::cerr << argv[0] << ": missing file operand\n";
		return 1;
	}
	else if (argc != 2) {
		std::cerr << argv[0] << ": too many arguments\n";
		return 2;
	}
	std::clock_t cs, ce;
	{
		std::cout << std::fixed << std::setprecision(3);
		cs = std::clock();
		w3::Text a;
		ce = std::clock();
		std::cout << "Constructor      " << TIME(cs, ce) << " seconds";
		std::cout << " - a.size = " << a.size() << std::endl;

		cs = std::clock();
		w3::Text b(argv[1]);
		ce = std::clock();
		std::cout << "Constructor      " << TIME(cs, ce) << " seconds";
		std::cout << " - b.size = " << b.size() << std::endl;

		cs = std::clock();
		a = b;
		ce = std::clock();
		std::cout << "Copy Assignment  " << TIME(cs, ce) << " seconds";
		std::cout << " - a.size = " << a.size() << std::endl;

		cs = std::clock();
		a = std::move(b);
		ce = std::clock();
		std::cout << "Move Assignment  " << TIME(cs, ce) << " seconds";
		std::cout << " - a.size = " << a.size() << std::endl;

		cs = std::clock();
		w3::Text c = a;
		ce = std::clock();
		std::cout << "Copy Constructor " << TIME(cs, ce) << " seconds";
		std::cout << " - c.size = " << c.size() << std::endl;

		cs = std::clock();
		w3::Text d = std::move(a);
		ce = std::clock();
		std::cout << "Move Constructor " << TIME(cs, ce) << " seconds";
		std::cout << " - d.size = " << d.size() << std::endl;

		cs = std::clock();
	}
	ce = std::clock();
	std::cout << "Destructor       " << TIME(cs, ce) << " seconds\n";
}#pragma once
#ifndef _TEXT_H__
#define _TEXT_H__
#include <string>
namespace w3 {
	class Text {
		std::string* _msg;
		size_t _size;
		void _dynamicAlloc(size_t size);
		void _destructor();
		void _setSize(const char* fileName);
	public:
		Text();
		Text(const char* fileName);
		Text(const Text& t_copy);
		Text& operator=(const Text& t);
		Text(Text&& t_move);
		Text& operator=(Text&& t);
		~Text();
		size_t size()const;
	};
}
#endif#include "Text.h"
#include <fstream>
#include <iostream>
using namespace std;
namespace w3 {
	void Text::_dynamicAlloc(size_t size) {
		_msg = (string*)0;
		_msg = new string[size];
	}

	void Text::_destructor() {
		if (_msg != (string*)0) {
			delete[] _msg;
		}
		_msg = (string*)0;
	}

	void Text::_setSize(const char* fileName) {
		fstream file;
		string line;
		size_t size(0);
		if (fileName[0] != '\0') {
			file.open(fileName, ios::in);
			if (file.is_open()) {
				while (!file.eof()) {
					getline(file, line);
					size += 1;
				}
			}
			else {
				size = 0;
				cout << "Cannot find the file, maybe wrong permission?" << endl;
				*this = Text();
			}
			_size = size;
			file.close();
		}
	}

	Text::Text() : _size(0) {
		_dynamicAlloc(0);
	}

	Text::Text(const char* fileName) {
		ifstream fileIn(fileName);
		size_t i = 0;
	    _setSize(fileName);
		_dynamicAlloc(_size);
		if (fileIn.is_open()) {
			if (_size != 0) {
				while (!fileIn.eof()) {
					cout << "file" << fileName << " contains " << _size << " lines " << endl;
					for (size_t i = 0; i < _size; i++)
						getline(fileIn, _msg[i]);
				}
			}
		}
	}

	Text::Text(const Text& t_copy) {
		size_t i;
		if (t_copy._msg != (string*)0) {
			_dynamicAlloc(t_copy._size);
			_size = t_copy._size;
			for (i = 0; i < _size; i++) {
				_msg[i] = t_copy._msg[i];
			}
		}
		else
			*this = Text();
	}

	Text& Text::operator=(const Text& t) {
		*this = Text(t);
		return *this;
	}

	Text::Text(Text&& t_move) {
		*this = t_move;
	}

	Text& Text::operator=(Text&& t) {
		size_t i;
		if (t._msg != (string*)0) {
			_dynamicAlloc(t._size);
			_size = t._size;
			for (i = 0; i < _size; i++) {
				_msg[i] = t._msg[i];
			}
			t._destructor();
		}
		else
			*this = Text();
		return *this;
	}

	Text::~Text() {
		_destructor();
	}

	size_t Text::size()const {
		return _size;
	}
}chuang55@matrix:~/oop345/workshop/w_3> g++ -o w3 -std=c++0x w3.cpp Text.cpp
chuang55@matrix:~/oop345/workshop/w_3> w3 gutenberg_shakespeare
Constructor      0.000 seconds - a.size = 0
filegutenberg_shakespeare contains 124457 lines 
Constructor      0.130 seconds - b.size = 124457
Copy Assignment  0.020 seconds - a.size = 124457
Move Assignment  0.010 seconds - a.size = 124457
Copy Constructor 0.010 seconds - c.size = 124457
Move Constructor 0.030 seconds - d.size = 124457
Destructor       0.020 seconds
chuang55@matrix:~/oop345/workshop/w_3> exit
exit

Script done on Wed 03 Feb 2016 05:52:06 PM EST
