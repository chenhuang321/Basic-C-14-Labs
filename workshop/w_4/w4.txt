Script started on Fri 12 Feb 2016 04:23:11 PM EST
chuang55@matrix:~/oop345/workshop/w_4> whoami
chuang55
chuang55@matrix:~/oop345/workshop/w_4> cat w4.cpp KVList.h 
// Workshop 4 - Templates
 // w4.cpp

 #include <iostream>
 #include <iomanip>
 #include <string>
 #include "KVList.h"
 using namespace w4;

 template <typename K, typename V, int N>
 void display(const std::string& msg, const KVList<K, V, N>& list, int w) { 
     std::cout << msg;
	 for (size_t i = 0; i < list.size(); i++)
		 std::cout << std::setw(w) << list.key(i)
			 << " : " << list.value(i) << std::endl;
 }

 int main(int argc, char** argv) {
     if (argc != 1) {
         std::cerr << argv[0] << ": too many arguments\n";
         return 1;
     }

     size_t width(0);
     bool keepreading;
     std::cout << std::fixed << std::setprecision(2);
     std::cout << "\nInventory\n=========\n";
     KVList <std::string, double, 5> inventory;
     std::string str;
     double price;

     keepreading = true;
     do {
          std::cout << "Product : ";
          getline(std::cin, str);
          if (str.compare("quit") == 0) {
              keepreading = false;
          } else {
              std::cout << "Price : ";
              std::cin >> price;
              std::cin.ignore();
              inventory.add(str, price);
          }
     } while(keepreading);
     display("\nPrice List\n----------\n", inventory, 13);

     std::cout << "\nCorrections\n-----------\n";
     keepreading = true;
     do {
          std::cout << "Product : ";
          getline(std::cin, str);
          if (str.compare("quit") == 0) {
              keepreading = false;
          } else {
              int i = inventory.find(str);
              if (i != -1) {
                  std::cout << "Price : ";
                  std::cin >> price;
                  std::cin.ignore();
                  inventory.replace(i, str, price);
              }
          }
     } while(keepreading);
     display("\nPrice List\n----------\n", inventory, 13);
     std::cout << "\nGlossary\n========\n";
     KVList <std::string, std::string, 5> glossary;
     std::string key, definition;

     keepreading = true;
     do {
          std::cout << "Key : ";
          getline(std::cin, key);
          if (key.compare("quit") == 0) {
              keepreading = false;
          } else {
              std::cout << "Definition : ";
              getline(std::cin, definition);
              glossary.add(key, definition);
          }
     } while(keepreading);
     display("\nEntries\n-------\n", glossary, 5);
 }
#pragma once
#ifndef _KVLIST_H__
#define _KVLIST_H__
namespace w4 {
	template <typename K, typename V, int N>
	class KVList {
		K _key[N];
		V _value[N];
		size_t _totalNum;
	public:
		KVList() : _totalNum(0) {}
		
		size_t size()const {
			return _totalNum;
		}
		
		const K& key(size_t i) const {
			if (i < _totalNum)
				return _key[i];
			else
				return _key[0];
		}
		
		const V& value(size_t i) const {
			return i < _totalNum ? _value[i] : _value[0];
		}
		
		KVList& add(const K& more_key, const V& more_value) {
			if(_totalNum < N) {
				_key[_totalNum] = more_key;
				_value[_totalNum] = more_value;
				_totalNum += 1;
			}
			return *this;
		}
		
		int find(const K& k) const {
		    size_t i;
		    size_t result = 0;
		    for(i = 0; i < _totalNum; i++) {
		    	if(_key[i] == k)
		    	    result = i;
			}
			return result;
		}
		
		KVList& replace(size_t i, const K& k, const V& v) {
		    if (i < _totalNum){
			    _key[i] = k;
			    _value[i] = v;
		    }
		    return *this;
		}
		
	};
}
#endif
chuang55@matrix:~/oop345/workshop/w_4> g++ -o w4 w4.cpp
chuang55@matrix:~/oop345/workshop/w_4> w4

Inventory
=========
Product : Pizza
Price : 4.49
Product : Pierogi
Price : 2.56
Product : Potato Chips
Price : 2.29
Product : Black Tea
Price : 4.49
Product : Geen Tea
Price : 3.46
Product : Fruit Tea
Price : 2.29
Product : quit

Price List
----------
        Pizza : 4.49
      Pierogi : 2.56
 Potato Chips : 2.29
    Black Tea : 4.49
     Geen Tea : 3.46

Corrections
-----------
Product : Black Tea
Price : 5.29
Product : quit

Price List
----------
        Pizza : 4.49
      Pierogi : 2.56
 Potato Chips : 2.29
    Black Tea : 5.29
     Geen Tea : 3.46

Glossary
========
Key : CPU
Definition : central processing unit
Key : ALU
Definition : aithmetic logic unit
Key : quit

Entries
-------
  CPU : central processing unit
  ALU : aithmetic logic unit
chuang55@matrix:~/oop345/workshop/w_4> exit
exit

Script done on Fri 12 Feb 2016 04:25:22 PM EST
