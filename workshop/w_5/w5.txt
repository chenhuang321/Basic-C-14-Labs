Script started on Sat 20 Feb 2016 01:22:58 PM EST
chuang55@matrix:~/oop345/workshop/w_5> whoami
chuang55
chuang55@matrix:~/oop345/workshop/w_5> cat *.cpp *.h
#include "Message.h"
#include <fstream>
using namespace std;

namespace w5 {
	
	Message::Message() {}
	
	Message::Message(std::ifstream& fileInput, char ccObj) {
        string tweetLine;
        getline(fileInput, tweetLine, ccObj);
        if(!tweetLine.empty()) {
        	_tweetMsg._name1 = tweetLine.substr(0, tweetLine.find(' '));
        	tweetLine = tweetLine.substr(tweetLine.find(' ') + 1);
        	if(tweetLine[0] == '@') {
        		_tweetMsg._name2 = tweetLine.substr(1, tweetLine.find(' '));
        		_tweetMsg._msg = tweetLine.substr(tweetLine.find(' ') + 1);
			}
			else {
				_tweetMsg._msg = tweetLine;
			}
		}
	}
	
	bool Message::empty()const {
	    return _tweetMsg.empty(); 
	}
	
	void Message::display(std::ostream& os)const {
	    if(!empty()) {
			if(!_tweetMsg.empty() && !(_tweetMsg._msg == _tweetMsg._name1)) {
				cout << "Message" << endl;
				cout << " User  : " <<  _tweetMsg._name1 << endl;
				if(!_tweetMsg._name2.empty()) {
				    cout << " Reply : " << _tweetMsg._name2 << endl;
				}
				if(!_tweetMsg._msg.empty()) {
				    cout << " Tweet : " << _tweetMsg._msg << endl;
				}
				cout << endl;
			}
		} 
	}
}
#include "Notifications.h"
using namespace std;
namespace w5 {
	Notifications::Notifications() : _size(0) {}
	
	Notifications::Notifications(const Notifications& n) {
		_size = 0;
		if(n._size != 0) {
			_size = n._size;
			_m.clear();
			for(auto me : n._m) {
				_m.push_back(me);
			}
		}
	}
	
	Notifications& Notifications::operator=(const Notifications& n) {
		*this = Notifications(n);
		return *this;
	}
	
	Notifications::Notifications(Notifications&& nmove) {
		_size = 0;
		if(nmove._size != 0) {
			_size = nmove._size;
			_m.clear();
			for(auto me : nmove._m) {
				_m.push_back(me);
			}
		}
	}
	
	Notifications&& Notifications::operator=(Notifications&& nmove) {
		if(this != &nmove){
			_m=nmove._m;
		    _size=nmove._size;
		    nmove._m.clear();
	        nmove._size=0;
		}	
		return std::move(*this);
	}
	
	void Notifications::operator+=(const Message& msg) {
		_size += 1;
		_m.push_back(msg);
	}
	
	void Notifications::display(std::ostream& os) const {
	    for(auto var : _m) {
	    	var.display(os);
		}
	}
}
// Workshop 5 - Containers
 // w5.cpp

 #include <iostream>
 #include <fstream>
 #include "Message.h"
 #include "Notifications.h"

 const char REC_DELIMITER = '\n';

 w5::Notifications collect(std::ifstream& in, char recDelim) {
     w5::Notifications notifications;

     do {
         w5::Message message(in, recDelim);
         if (!message.empty())
             notifications += std::move(message);
     } while(in);

     return notifications;
 }

 int main(int argc, char* argv[]) {
     if (argc == 1) {
         std::cerr << argv[0] << ": missing file operand\n";
         return 1;
     }
     else if (argc != 2) {
         std::cerr << argv[0] << ": too many arguments\n";
         return 2;
     }
     std::ifstream file(argv[1]);
     if (!file) {
         std::cerr << argv[0] << "\n: Failed to open " << argv[1] << "\n"; 
         return 3;
     }

     std::cout << "\nNotifications\n=============\n\n";
     w5::Notifications notifications = collect(file, REC_DELIMITER);

     notifications.display(std::cout);

     std::cout << "Press any key to continue ... ";
     std::cin.get();
 }
#pragma once
#ifndef W5_MESSAGE_H__
#define W5_MESSAGE_H__
#include <string>
#include <iostream>

namespace w5 {
	
	struct Tweet {
		std::string _name1;
		std::string _name2;
		std::string _msg;
		bool empty()const { return _name1.empty(); }
	};
	
	class Message {
		Tweet _tweetMsg;
	public:
		Message(); // Empty State
		Message(std::ifstream& fileInput, char ccObj);
		bool empty()const;
		void display(std::ostream& os)const;
	};
}
#endif
#pragma once
#ifndef _NOTIFICATIONS_H__
#define _NOTIFICATIONS_H__
#include "Message.h"
#include <list>
#include <iostream>
#define MSG_MAX 10
namespace w5 {
	
	class Notifications{
		std::list<Message> _m;
		size_t _size;
	public:	
		Notifications();
		Notifications(const Notifications&);
		Notifications& operator=(const Notifications&);
		Notifications(Notifications&&);
		Notifications&& operator=(Notifications&&);
		//~Notifications();
		void operator+=(const Message& msg);
		void display (std::ostream& os) const;
	};
}
#endif
chuang55@matrix:~/oop345/workshop/w_5> g++ -o w5 -std=c++0x w5.cpp Notifications .cpp Message.cpp
chuang55@matrix:~/oop345/workshop/w_5> w5 w5_test.c[Kdat

Notifications
=============

Message
 User  : jim
 Tweet : Workshop 5 is cool

Message
 User  : harry
 Reply : jim 
 Tweet : working on workshop 5 now

Message
 User  : dave
 Tweet : what the ^#$%!

Message
 User  : john
 Reply : harry 
 Tweet : I'm done

Press any key to continue ... 
chuang55@matrix:~/oop345/workshop/w_5> exit
exit

Script done on Sat 20 Feb 2016 01:23:44 PM EST
